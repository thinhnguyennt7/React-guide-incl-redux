class Person {
    // Class can have both property and method
    name = 'Thinh'
    call = () => { ... }
}


// To instantiate Class
const myPerson = new Person() // Same as in Java
myPerson.call()
console.log(myPerson.name)

Inheritance
class Person extends Master


*** ES6:
class Human {
    constructor() {
    this.gender = 'Male';
    }

    printGender() {
    console.log(this.gender);
    }
}

class Person extends Human {
    constructor() {
        super();
        this.name = 'Thinh'
    }

    printMyName() {
        console.log(this.name);
    }
}

const person = new Person();
person.printMyName()
person.printGender()  // Inheritance example






// Propertise constructor newer version
ES6 :
    constructor() {
        this.myProperty = 'value'
    }
ES7:
    myProperty = 'value'


// Methods constructor newer version
ES6:
    myMethod() { ... }
ES7:
    myMethod = () => { ... }



***ES7: Babel
class Human {
    gender = 'Male';
    printGender = () => {
        console.log(this.gender);
    }
}

class Person extends Human {
    name = 'Thinh';
    gender = 'female';

    printMyName = () => {
        console.log(this.name);
    }
}
const person = new Person();
person.printMyName();
person.printGender();
